<!DOCTYPE html>
<html lang="en">
	<head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>ESP-IDF Vulnerabilities</title>
		<link rel="stylesheet" href="css/style.css">

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.1/css/jquery.dataTables.css">
        <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.js"></script>

        <!-- DataTables Buttons extension -->
        <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">
        <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
        <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
        <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>

        <!-- JSZip (required for Excel export) -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

        <!-- pdfmake (required for PDF export) -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>
	</head>

	<body>
		<header>
			<div class="site-header">
				<h1 class="site-title"><a href=".">ESP-IDF Vulnerabilities</a></h1>
				<img class="site-logo" src="images/espressif-logo.png" alt="Espressif Logo">
			</div>
		</header>
		<main>
            <p>
                This page details known vulnerabilities affecting released
                ESP-IDF versions, current as of ${datetime} UTC. Additional
                insights into known vulnerabilities can be found in the
                <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/security/vulnerabilities.html">Vulnerabilities</a>
                page of the ESP-IDF Programming Guide.
            </p>

            <p>
            <strong>Vulnerable status:</strong>
            <strong>YES</strong> - version is confirmed to be vulnerable,
            <strong>MAYBE</strong> - version might be vulnerable and needs further review,
            <strong>EXCLUDED</strong> - vulnerability does not apply to this version,
            <strong>NO</strong> - there are no known vulnerabilities
            </p>

            <p>
            <strong>Search:</strong> The input is split into words, and each word is matched
            independently in any column, in any order. Matching is case-insensitive.
            For a more detailed search, use the <button onclick="toggleFilterTable()">advanced search</button>.
            </p>


            <table id="filter-table" cellpadding="3" cellspacing="0" border="0" style="width: 67%; margin: 0 auto 2em auto;">
                <thead>
                    <tr>
                        <th align="left">target</th>
                        <th>cascading filters</th>
                        <th>search text</th>
                        <th>treat as regex</th>
                        <th>case-sensitive search</th>
                    </tr>
                </thead>
                <tbody>
                    <tr id="filter_col1" data-column="0">
                        <td>release</td>
                        <td align="center"><select id="filter-release" style="width:100%"><option value="">all</option></select></td>
                        <td align="center"><input type="text" class="column_filter" id="col0_filter"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col0_regex"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col0_case"></td>
                    </tr>
                    <tr id="filter_col2" data-column="1">
                        <td>cve</td>
                        <td align="center"><select id="filter-cve" style="width:100%"><option value="">all</option></select></td>
                        <td align="center"><input type="text" class="column_filter" id="col1_filter"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col1_regex"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col1_case"></td>
                    </tr>
                    <tr id="filter_col3" data-column="2">
                        <td>vulnerable</td>
                        <td align="center"><select id="filter-vulnerable" style="width:100%"><option value="">all</option></select></td>
                        <td align="center"><input type="text" class="column_filter" id="col2_filter"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col2_regex"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col2_case"></td>
                    </tr>
                    <tr id="filter_col4" data-column="3">
                        <td>severity</td>
                        <td align="center"><select id="filter-severity" style="width:100%"><option value="">all</option></select></td>
                        <td align="center"><input type="text" class="column_filter" id="col3_filter"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col3_regex"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col3_case"></td>
                    </tr>
                    <tr id="filter_col5" data-column="4">
                        <td>package</td>
                        <td align="center"><select id="filter-package" style="width:100%"><option value="">all</option></select></td>
                        <td align="center"><input type="text" class="column_filter" id="col4_filter"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col4_regex"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col4_case"></td>
                    </tr>
                    <tr id="filter_col6" data-column="5">
                        <td>version</td>
                        <td align="center"><select id="filter-version" style="width:100%"><option value="">all</option></select></td>
                        <td align="center"><input type="text" class="column_filter" id="col5_filter"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col5_regex"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col5_case"></td>
                    </tr>
                    <tr id="filter_col7" data-column="6">
                        <td>description</td>
                        <td align="center"></td> <!-- No filter for Actions -->
                        <td align="center"><input type="text" class="column_filter" id="col6_filter"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col6_regex"></td>
                        <td align="center"><input type="checkbox" class="column_filter" id="col6_case"></td>
                    </tr>
                </tbody>
            </table>

            <table id="report" class="display" style="width:100%">
                <thead>
                    <tr>
                        <th>release</th>
                        <th>cve</th>
                        <th>vulnerable</th>
                        <th>severity</th>
                        <th>package</th>
                        <th>version</th>
                        <th>description</th>
                    </tr>
                </thead>
            </table>
		</main>
	</body>

    <script>
        jQuery.extend(jQuery.fn.dataTable.ext.type.order, {
            "version-pre": function (version) {
                const parts = version.split('.').map(p => parseInt(p) || 0);
                while (parts.length < 3) parts.push(0); // pad to [major, minor, patch]
                return parts[0] * 1e6 + parts[1] * 1e3 + parts[2];
            }
        });

        jQuery.extend(jQuery.fn.dataTable.ext.type.order, {
            "release-pre": function (v) {
                // Remove the "v" prefix
                v = v.trim().replace(/^v/i, '');

                // Extract main version and suffix
                const [main, suffix] = v.split('-');

                const parts = main.split('.').map(p => parseInt(p, 10) || 0);
                while (parts.length < 3) parts.push(0);

                // Boost score for "-next" suffix
                const bump = suffix === 'next' ? 1 : 0;

                // Generate sortable number (higher is newer)
                return parts[0] * 1e9 + parts[1] * 1e6 + parts[2] * 1e3 + bump;
            }
        });

        const vulnerable_sort_map = {
            "SKIPPED": 0,
            "NO": 1,
            "EXCLUDED": 2,
            "MAYBE": 3,
            "YES": 4
        };

        jQuery.extend(jQuery.fn.dataTable.ext.type.order, {
            "vulnerable-pre": function (data) {
                return vulnerable_sort_map[data.trim()] ?? -1;
            }
        });

        const severity_sort_map = {
            "LOW": 0,
            "MEDIUM": 1,
            "HIGH": 2,
            "CRITICAL": 3
        };

        jQuery.extend(jQuery.fn.dataTable.ext.type.order, {
            "severity-pre": function (data) {
                return severity_sort_map[data.trim()] ?? -1;
            }
        });

        $(document).ready(function() {
            var rows = ${rows};

            table = $('#report').DataTable({
                data: rows,
                order: [
                    [0, 'desc'],
                    [2, 'desc'],
                    [3, 'desc']
                ],
                dom: 'Bfrtip',  // B = Buttons
                buttons: [
                    'excelHtml5',
                    'csvHtml5',
                    {
                        extend: 'pdfHtml5',
                        orientation: 'landscape'
                    }
                ],
                search: {
                    regex: false,
                },
                scrollX: true,
                pageLength: 50, // Set the default number of entries to be shown

                initComplete: function () {
                    const api = this.api();

                    const filters = [
                        { id: '#filter-release', col: 0 },
                        { id: '#filter-cve', col: 1 },
                        { id: '#filter-vulnerable', col: 2 },
                        { id: '#filter-severity', col: 3 },
                        { id: '#filter-package', col: 4 },
                        { id: '#filter-version', col: 5 }
                    ];

                    // Apply filters on change
                    filters.forEach(filter => {
                        $(filter.id).on('change', function () {
                            filters.forEach(f => {
                                const val = $(f.id).val();
                                const regex = val ? '^' + $.fn.dataTable.util.escapeRegex(val) + '$' : '';
                                api.column(f.col).search(regex, true, false);
                            });
                            api.draw();
                        });
                    });

                    function updateFilterOptions() {
                        const visibleRows = api.rows({ search: 'applied' }).data();

                        filters.forEach(filter => {
                            const select = $(filter.id);
                            const currentVal = select.val();
                            const seen = new Set();

                            visibleRows.each(function (row) {
                                const cellHtml = row[filter.col];
                                const text = $('<div>').html(cellHtml).text().trim();
                                if (text) seen.add(text);
                            });

                            select.empty().append('<option value="">All</option>');
                            [...seen].sort().forEach(value => {
                                select.append($('<option>', { value: value, text: value }));
                            });

                            if (seen.has(currentVal)) {
                                select.val(currentVal);
                            }
                        });
                    }

                    // Populate filters on load and every redraw
                    updateFilterOptions();
                    api.on('draw', updateFilterOptions);
                }

            });
        });

        function filterColumn(table, i) {
            let filter = document.querySelector('#col' + i + '_filter');
            let regex = document.querySelector('#col' + i + '_regex');
            let case_sen = document.querySelector('#col' + i + '_case');

            table.column(i).search(filter.value, regex.checked, !regex.checked, !case_sen.checked).draw();
        }

        document.querySelectorAll('input.column_filter').forEach((el) => {
            let tr = el.closest('tr');
            let columnIndex = tr.getAttribute('data-column');

            el.addEventListener(el.type === 'text' ? 'keyup' : 'change', () =>
                filterColumn(table, columnIndex)
            );
        });

        function toggleFilterTable() {
            const table = document.getElementById('filter-table');
            const button = event.target;

            table.classList.toggle('visible');

            if (table.classList.contains('visible')) {
                button.textContent = 'hide advanced search';
            } else {
                button.textContent = 'advanced search';
            }
        }
    </script>
</html>
